/* =========================================================
 * bootstrap-modal.js v2.0.1
 * http://twitter.github.com/bootstrap/javascript.html#modals
 * =========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

/*
 * CSOD modified
 * 
 * Removed or modified old jQuery that is not compatible with jQuery 3.4.
 * Updated tabbing behavior to keep focus within the modal 
 * 
 */


!function ($) {

    "use strict"

    /* MODAL CLASS DEFINITION
    * ====================== */

    var Modal = function (content, options) {
        this.options = options
        this.$element = $(content)
            .on('click.dismiss.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))
    }

    Modal.prototype = {

        constructor: Modal

    , toggle: function () {
        return this[!this.isShown ? 'show' : 'hide']()
    }

    , show: function () {
        var that = this

        if (this.isShown) return
        // resize dialog to inner content
        var viewport = $(window).height();
        var topGap = ((viewport * 0.1));
        var maxHeight = ($(window).width() < 768) ? viewport - 40 : viewport - topGap - 50;
        $('.modal', this.$element).css('max-height', maxHeight);
        this.$element.css("visibility", "hidden").show();
        var headerHeight = $(".modal-header", this.$element).outerHeight(),
            footerHeight = $(".modal-footer", this.$element).outerHeight(),
            bodyPadding = parseInt($(".modal-body", this.$element).css("padding-top").replace("px", "")) + parseInt($(".modal-body", this.$element).css("padding-bottom").replace("px", "")),
            bodyMaxHeight = maxHeight - headerHeight - footerHeight - bodyPadding;
        this.$element.hide().css("visibility", "visible");
        if (that.$element.data('ctl-opt') != undefined) {
            if (that.$element.data('ctl-opt').fullscreen == "true") {
                var modalHeight = this.$element.height();
                $('.modal-body', this.$element).css('max-height', modalHeight - headerHeight - footerHeight - bodyPadding);
            } else {
                $('.modal-body', this.$element).css('max-height', bodyMaxHeight);
            }
        } else {
            $('.modal-body', this.$element).css('max-height', bodyMaxHeight);
        }
        $('body').addClass('modal-open')
        $('form,.df-footer').attr('aria-hidden', 'true') // hide form/footer from screen reader when modal is open
        this.isShown = true

        this.$element.trigger('show')

        //escape.call(this)
        this.$element.on('focus', function () {
            $(document).on('keydown', function () {
                escape.call(that)
            })
        })
        backdrop.call(this, function () {
            !that.$element.parent().length && that.$element.appendTo(document.body); //don't move modals dom position
            that.$element.show().addClass('in').trigger('shown').trigger('focus');
        })
        elFocus.call(this)
        elTab.call(this)
    }

    , hide: function (e) {
        e && e.preventDefault()

        if (!this.isShown) return

        var that = this
        this.isShown = false

        escape.call(this)

        this.$element
          .trigger('hide')
          .removeClass('in')

        var ind = $(".modal.in:visible").length;
        if (ind <= 0) {
            $('body').removeClass('modal-open')
            $('form,.df-footer').removeAttr('aria-hidden', 'true') // unhide form/footer from screen reader when modal is closed
        } else {
            ind -= 1;
            $(".modal.in:visible").eq(ind).trigger('focus');
        }

        hideModal.call(this)
    }

    }


    /* MODAL PRIVATE METHODS
    * ===================== */

    function hideModal(that) {
        this.$element
      .hide()
      .trigger('hidden')

        backdrop.call(this)
    }

    function elFocus() {
        var that = this;

        that.$modalBody = $('.modal-body')

        that.$modalBody.children().find('a[href]:visible,area[href]:visible,:input:visible,:input:not([disabled]),textarea:visible,textarea:not([disabled]),button:visible,button:not([disabled]),[tabindex]:visible').first().trigger('focus')

    }

    function elTab() {
        var that = this;

        that.$modal = $('.modal');

        var $tabEls = that.$element.find(
                'a[href]:visible,area[href]:visible,:input:visible,:input:not([disabled]),textarea:visible,textarea:not([disabled]),button:visible,button:not([disabled]),[tabindex]:visible'),
            $lastTabEl = $tabEls.eq($tabEls.length - 1),
            $firstTabEl = $tabEls.eq(0);

            $lastTabEl.on('keydown',
                function(e) {
                    if (e.which === 9 && !e.shiftKey) {
                        that.$modal.trigger('focus');
                    }
                });

            $firstTabEl.on('keydown',
                function (e) {
                    if (e.which === 9 && e.shiftKey) {
                        $lastTabEl.trigger('focus');
                        e.preventDefault();
                    }
                });
    }

    function backdrop(callback) {
        var that = this
      , animate = this.$element.hasClass('fade') ? 'fade' : ''

        if (this.isShown && this.options.backdrop) {

            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(document.body)

            if (this.options.backdrop != 'static') {
                this.$backdrop.on("click", $.proxy(this.hide, this))
            }

            this.$backdrop.addClass('in')
            callback();

        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass('in')
            removeBackdrop.call(this)
        } else if (callback) {
            callback()
        }
    }

    function removeBackdrop() {
        this.$backdrop.remove()
        this.$backdrop = null
    }

    function escape() {
        var that = this
        if (this.isShown && this.options.keyboard) {
            $(document).on('keyup.dismiss.modal', function (e) {
                if (e.which == 27)
                    that.$element.find(".modal-header .close.cso-action").trigger("click");

            })
        } else if (!this.isShown) {
            $(document).off('keyup.dismiss.modal')
        }
    }


    /* MODAL PLUGIN DEFINITION
    * ======================= */

    $.fn.modal = function (option) {
        return this.each(function () {
            var $this = $(this)
        , data = $this.data('modal')
        , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)
            if (!data) $this.data('modal', (data = new Modal(this, options)))
            if (typeof option == 'string') data[option]()
            else if (options.show) data.show()
        })
    }

    $.fn.modal.defaults = {
        backdrop: true
    , keyboard: true
    , show: true
    }

    $.fn.modal.Constructor = Modal


    /* MODAL DATA-API
    * ============== */

    $(function () {
        $('body').on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
            var $this = $(this), href
        , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
        , option = $target.data('modal') ? 'toggle' : $.extend({}, $target.data(), $this.data())

            e.preventDefault()
            $target.modal(option)
        })
    })

}(window.jQuery);
